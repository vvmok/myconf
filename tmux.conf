set -g status on
set -g status-keys vi

set -g history-limit 1000000

set -g prefix C-t
set -g base-index 1

set -g default-terminal "screen-256color"

bind-key C-t last-window

setw -g monitor-activity on
set -g visual-activity on
set -g visual-bell on

set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# pour ceux qui n'ont pas laché la souris
#set -g mouse-select-pane on
#setw -g mode-mouse on

# ca peut etre utile ...
#set -g status-utf8 on
#setw -g utf8 on

set -g status-bg black
set -g status-fg white
#set -g status-left '#[fg=green]#H'
set-window-option -g window-status-current-bg red
#setw -g window-status-current-bg cyan
setw -g window-status-current-attr bold
#set -g status-right '#[fg=yellow]#H | %F %s'
#set -g status-right '#[fg=yellow]%F Load:#(uptime | cut -d":" -f 5)'
set -g status-right '#[fg=yellow]#H %F'

# Automatically set window title
setw -g automatic-rename

# repercuter le contenu de la fenetre dans la barre de titre
# reference des string : man tmux (status-left)
set -g set-titles on
set -g set-titles-string '#H #W #T' # host window command

# locker la session après inactivité (en s)
set -g lock-after-time 3600
# pour que le lock marche sous linux (apt-get install vlock)
set -g lock-command vlock

set -g default-terminal xterm
set -g display-time 2000
set -g message-bg magenta

bind-key -n      F1 select-window -t 1
bind-key -n      F2 select-window -t 2
bind-key -n      F3 select-window -t 3
bind-key -n      F4 select-window -t 4
bind-key -n      F5 select-window -t 5
bind-key -n      F6 select-window -t 6
bind-key -n      F7 select-window -t 7
bind-key -n      F8 select-window -t 8
bind-key -n      F9 previous-window
bind-key -n      F10 next-window

## Terminal actif
# Couleur du foreground
set-window-option -g window-status-current-fg yellow
# Couleur du background
set-window-option -g window-status-current-bg cyan
# Attribut (cf ci-dessus pour la liste)
set-window-option -g window-status-current-attr bold
## Terminal avec notification
# Couleur du foreground
# Couleur du background
# Attribut
#setw -g window-status-alert-attr default
#setw -g window-status-alert-fg red
#setw -g window-status-alert-bg default
 
## Panel par défaut
set -g pane-border-fg white
#set -g pane-border-bg black
 
## Panel actif
set -g pane-active-border-fg cyan
#set -g pane-active-border-bg green 

#urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

#Tmux has a command that will send your input to all panes simultaneously. This is handy when you want to run commands on multiple servers simultaneously.
#I toggle this on and off with prefix a:
bind-key a set-window-option synchronize-panes


#Ctrl+t " - split pane horizontally.
#Ctrl+t % - split pane vertically.
#Ctrl+t arrow key - switch pane.
#Hold Ctrl+t, don't release it and hold one of the arrow keys - resize pane.
#Ctrl+t c - (c)reate a new window.
#Ctrl+t n - move to the (n)ext window.
#Ctrl+t p - move to the (p)revious window.


#Pane switching with Alt+arrow
#For pane switching, Alt+arrow key combination (which is default in Terminator) worked fine for me and didn't cause any conflicts so far, 
#so I think it will work fine in tmux, too. But it is of course a matter of taste and you can use whatever key you want.
# To switch panes with Alt, you can use these directives:
#bind -n M-Left select-pane -L
#bind -n M-Right select-pane -R
#bind -n M-Up select-pane -U
#bind -n M-Down select-pane -D

#Pane Switching Using Mouse
#In order to make migration from Terminator a little bit easier, you can modify tmux configuration file to allow pane switching using your mouse:
#set-option -g mouse-select-pane on
#Of course, this may be considered as an undesirable behaviour, as the tmux allows to boost productivity by not requiring to touch the mouse at all.

#Sharing Session
#All we've talked about so far is limited to a one-user session. As screen allows to share session, tmux is no worse. And setting things up is not too complicated.
#
#In order to share session on the same machine, you have to explicitly give tmux the path to the Unix socket which will be used through the session lifetime:
#tmux -S /tmp/our_socket
#Then you have to give other users access to the newly created file:
#chmod 777 /tmp/our_socket
#As expected, when a new user wants to join the session, he has to pass the socket path, so that tmux knows which session is about to be used:
#tmux -S /tmp/our_socket attach
#Note that setting privileges to 777 is one of the dumbest things you can do, unless you fully trust your co-workers. 
#You can also consider more sophisticated access control, SSH forwarding or give wemux a try. wemux is a set of scripts that makes sharing session easier and cleaner.
#This way or another, sharing session with tmux is quite easy, though not always fully secure. It takes some time to do it right.

#-------------------------------------------------------#
# Pane colours
#-------------------------------------------------------#
# set active-inactive window styles
#set -g window-style 'fg=colour247,bg=colour236'
#et -g window-active-style 'fg=default,bg=colour234'
set -g window-style 'fg=white,bg=default'
set -g window-active-style 'fg=green,bg=default'

# Pane border
#set -g pane-border 'bg=default,fg=colour238'

# Active pane border
set -g pane-active-border 'bg=default,fg=red'

# pane movement
#bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
#bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h  if-shell  "$is_vim"  "send-keys C-h"  "select-pane -L"
bind-key -n C-j   if-shell  "$is_vim"  "send-keys C-j"   "select-pane -D"
bind-key -n C-k  if-shell  "$is_vim"  "send-keys C-k"  "select-pane -U"
bind-key -n C-l   if-shell  "$is_vim"  "send-keys C-l"   "select-pane -R"
bind-key -n C-\   if-shell  "$is_vim"  "send-keys C-\\"  "select-pane -l"

set -g mode-keys vi

### COPY PASTE PUTTY, need prog xclip and mobaxterm for X display and variable DISPLAY set in tmux session

set -g mouse on
bind -T copy-mode    DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode    TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"


# allow yank into system clipboard
#bind C-y run "tmux save-buffer - | xclip -i"
bind C-y run-shell -b "tmux show-buffer | xclip -selection clipboard -i"
bind y run-shell -b "tmux show-buffer | xclip -selection clipboard -i"
# move x clipboard into tmux paste buffer
bind C-v run-shell -b "xclip -o -selection clipboard | tmux load-buffer - ; tmux paste-buffer"
bind v run-shell -b "xclip -o -selection clipboard | tmux load-buffer - ; tmux paste-buffer"

#If it's not working, you can always try xclip -o -selection clipboard to see what should paste. you also will be able to move any "tmux selected" text (mouse or bind-key [) to the clipboard (and thus to a regular windows window) with bind-key ctrl-y
